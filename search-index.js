var searchIndex = JSON.parse('{\
"ink_stroke_modeler_rs":{"doc":"Unofficial Rust bindings for the ink-stroke-modeler C++ â€¦","t":"NNNDEDEDDENDMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNMMMMLLLLLLLLLLLMMLMMLLMLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMM","n":["AbslStatusCode","Disabled","Kalman","KalmanPredictorParams","ModelerError","ModelerInput","ModelerInputEventType","ModelerParams","ModelerResult","PredictionParams","StrokeEnd","StrokeModeler","acceleration_weight","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","confidence_baseline_linearity_confidence","confidence_desired_number_of_samples","confidence_max_estimation_distance","confidence_max_linear_deviation","confidence_max_travel_speed","confidence_min_travel_speed","default","eq","eq","eq","eq","eq","equivalent","equivalent","event_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","hash","into","into","into","into","into","into","into","into","jerk_weight","kDown","kMove","kUp","max_time_samples","measurement_noise","min_catchup_velocity","min_stable_iteration","new","new","orientation","orientation","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pos","pos","position_modeler_drag_constant","position_modeler_spring_mass_constant","predict","prediction_interval","prediction_params","pressure","pressure","process_noise","reset","reset_w_params","sampling_end_of_stroke_max_iterations","sampling_end_of_stroke_stopping_distance","sampling_max_outputs_per_call","sampling_min_output_rate","stylus_state_modeler_max_input_samples","suggested","suggested","tilt","tilt","time","time","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","velocity","wobble_smoother_speed_ceiling","wobble_smoother_speed_floor","wobble_smoother_timeout"],"q":[[0,"ink_stroke_modeler_rs"],[156,"core::cmp"],[157,"core::fmt"],[158,"core::fmt"],[159,"core::hash"],[160,"core::option"],[161,"alloc::vec"],[162,"core::result"],[163,"alloc::string"],[164,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,2,2,0,0,0,0,0,0,0,2,0,3,10,13,8,6,1,2,3,4,10,13,8,6,1,2,3,4,1,2,3,4,1,2,3,4,6,1,3,3,3,3,3,3,8,6,1,2,3,4,6,1,10,10,13,6,6,1,2,3,4,10,10,13,13,8,6,1,2,3,4,6,1,10,13,8,6,1,2,3,4,3,1,1,1,3,3,3,3,10,8,10,13,6,1,2,3,4,10,13,4,4,8,3,4,10,13,3,8,8,4,4,4,4,4,3,4,10,13,10,13,1,2,3,4,6,10,13,8,6,1,2,3,4,10,13,8,6,1,2,3,4,10,13,8,6,1,2,3,4,8,13,4,4,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[6,6],7],[[1,1],7],0,0,0,0,0,0,[[],8],[[6,6],9],[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[10,1],[[10,11],12],[[13,11],12],[[6,11],12],[[6,11],12],[[1,11],12],[[2,11],12],[[3,11],12],[[4,11],12],[[[14,[0]]],10],[-1,-1,[]],[-1,-1,[]],[[[14,[0]]],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[6,-1],5,15],[[1,-1],5,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[1,[5,[16,16]],17,16,16,16],10],[4,8],[10,16],[13,16],[[6,6],[[18,[7]]]],[[1,1],[[18,[7]]]],[[2,2],[[18,[7]]]],[[3,3],[[18,[7]]]],[[4,4],[[18,[7]]]],[10,[[5,[16,16]]]],[13,[[5,[16,16]]]],0,0,[8,[[20,[[19,[13]],6]]]],0,0,[10,16],[13,16],0,[8,[[20,[5,6]]]],[[8,4],[[20,[5,6]]]],0,0,0,0,0,[[],3],[[],4],[10,16],[13,16],[10,17],[13,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,21,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[8,10],[[20,[[19,[13]],6]]]],[13,[[5,[16,16]]]],0,0,0],"c":[],"p":[[4,"ModelerInputEventType",0],[4,"PredictionParams",0],[3,"KalmanPredictorParams",0],[3,"ModelerParams",0],[15,"tuple"],[4,"ModelerError",0],[4,"Ordering",156],[3,"StrokeModeler",0],[15,"bool"],[3,"ModelerInput",0],[3,"Formatter",157],[6,"Result",157],[3,"ModelerResult",0],[3,"UniquePtr",158],[8,"Hasher",159],[15,"f32"],[15,"f64"],[4,"Option",160],[3,"Vec",161],[4,"Result",162],[3,"String",163],[3,"TypeId",164]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
