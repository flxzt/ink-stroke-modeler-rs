var searchIndex = new Map(JSON.parse('[\
["ink_stroke_modeler_rs",{"doc":"","t":"PPPGFGFFPPFPPONNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNOOOONOONNOOOOONOONNNNNNNNNNNNNNNNNNNNNNNOOOO","n":["Down","DuplicateElement","ElementOrderError","Errors","ModelerInput","ModelerInputEventType","ModelerParams","ModelerResult","Move","NegativeTimeDelta","StrokeModeler","TooFarApart","Up","acceleration","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","default","eq","eq","eq","eq","event_type","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","into","into","into","into","into","into","new","partial_cmp","partial_cmp","pos","pos","position_modeler_drag_constant","position_modeler_spring_mass_constant","predict","pressure","pressure","reset","reset_w_params","sampling_end_of_stroke_max_iterations","sampling_end_of_stroke_stopping_distance","sampling_max_outputs_per_call","sampling_min_output_rate","stylus_state_modeler_max_input_samples","suggested","time","time","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","validate","velocity","wobble_smoother_speed_ceiling","wobble_smoother_speed_floor","wobble_smoother_timeout"],"q":[[0,"ink_stroke_modeler_rs"],[106,"core::cmp"],[107,"core::fmt"],[108,"core::fmt"],[109,"alloc::string"],[110,"core::result"],[111,"core::option"],[112,"alloc::vec"],[113,"core::any"]],"d":["For the first pen down event (pen touches the screen)","when a duplicate element is sent","When order of element is not correct. Either when","errors","struct holding all information for input event","modeler Input event Type","all parameters for the modeler","result struct contains the position, time, presusre as …","For events between the first (<code>Down</code>) and last (<code>Up</code>) event …","when a new event has a time that’s less than the …","This class models a stroke from a raw input stream. The …","When the time delta is too large between the input …","For the last event (pen going up)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The ratio of the pen’s velocity that is subtracted from …","The mass of the “weight” being pulled along the path, …","Models the given input prediction without changing the …","","","Clears any in-progress stroke, keeping the same model …","Clears any in-progress stroke, and re initialize the model …","The maximum number of iterations to perform at the end of …","This determines the stop condition for the end-of-stroke …","Maximum number of outputs to generate per call to Update …","The minimum number of modeled inputs to output per unit …","the maximum number of raw inputs to look at when searching …","ModelerParams::wobble_smoother_timeout : 0.04, …","","","","","","","","","","","","","","","","","","","","","","","","Updates the model with a raw input, and appends newly …","validate the parameters as being correct, returns a error …","","","The range of speed considered for wobble smoothing. At …","these parameters are used to apply smoothing to the input …"],"i":[1,9,9,0,0,0,0,0,1,9,0,9,1,7,6,9,1,2,3,7,6,9,1,2,3,7,1,2,3,1,2,3,1,6,2,7,1,2,3,7,2,9,1,2,3,7,6,9,1,2,3,7,1,6,9,1,2,3,7,6,1,3,2,7,3,3,6,2,7,6,6,3,3,3,3,3,3,2,7,1,2,3,6,9,1,2,3,7,6,9,1,2,3,7,6,9,1,2,3,7,6,3,7,3,3,3],"f":"``````````````{ce{}{}}00000000000{bb}{dd}{ff}{{ce}h{}{}}00{{bb}j}{{}l}{{}d}{{}n}{{bb}A`}{{dd}A`}{{ff}A`}{{nn}A`}`{{AbAd}Af}{{bAd}Af}{{dAd}Af}{{fAd}Af}{{nAd}Af}{cc{}}00000{{bc}hAh}{ce{}{}}00000{f{{Al{lAj}}}}{{bb}{{An{j}}}}{{ff}{{An{j}}}}````{l{{Al{{B`{n}}Aj}}}}``{lh}{{lf}{{Al{hAj}}}}`````{{}f}``777{c{{Al{e}}}{}{}}00000000000{cBb{}}00000{{ld}{{Al{{B`{n}}Ab}}}}{f{{Al{fAj}}}}````","c":[],"p":[[6,"ModelerInputEventType",0],[5,"ModelerInput",0],[5,"ModelerParams",0],[1,"unit"],[6,"Ordering",106],[5,"StrokeModeler",0],[5,"ModelerResult",0],[1,"bool"],[6,"Errors",0],[5,"Formatter",107],[8,"Result",107],[10,"Hasher",108],[5,"String",109],[6,"Result",110],[6,"Option",111],[5,"Vec",112],[5,"TypeId",113]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
